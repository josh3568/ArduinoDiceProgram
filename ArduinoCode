#include "Arduino.h"

//define the pin numbers
int P7 = 7; //pushbutton

//if dice oriented in shape of H, upper left is 0 going down center is 4 and upper right is 5 going down to 6
int P6 = 6;
int P5 = 5;
int P4 = 4;
int P3 = 3;
int P2 = 2;
int P1 = 1;
int P0 = 0;

void ClearMemory(){
  //sets all outputs to zero
  digitalWrite(P6, LOW);
  digitalWrite(P5, LOW);
  digitalWrite(P4, LOW);
  digitalWrite(P3, LOW);
  digitalWrite(P2, LOW);
  digitalWrite(P1, LOW);
  digitalWrite(P0, LOW);
}

void DisplayDice(int Value){
 //Writes the light pattern for the dice given the number to display

  switch(Value){
  case 6:{
    digitalWrite(P6, HIGH);
    digitalWrite(P5, HIGH);
    digitalWrite(P4, HIGH);
    digitalWrite(P3, LOW);
    digitalWrite(P2, HIGH);
    digitalWrite(P1, HIGH);
    digitalWrite(P0, HIGH);
    break;
  }
  case 5:{
    digitalWrite(P6, HIGH);
    digitalWrite(P5, LOW);
    digitalWrite(P4, HIGH);
    digitalWrite(P3, HIGH);
    digitalWrite(P2, HIGH);
    digitalWrite(P1, LOW);
    digitalWrite(P0, HIGH);
    break;
  }
  case 4:{
    digitalWrite(P6, HIGH);
    digitalWrite(P5, LOW);
    digitalWrite(P4, HIGH);
    digitalWrite(P3, LOW);
    digitalWrite(P2, HIGH);
    digitalWrite(P1, LOW);
    digitalWrite(P0, HIGH);
    break;
  }
  case 3:{
    digitalWrite(P6, HIGH);
    digitalWrite(P5, LOW);
    digitalWrite(P4, LOW);
    digitalWrite(P3, HIGH);
    digitalWrite(P2, LOW);
    digitalWrite(P1, LOW);
    digitalWrite(P0, HIGH);
    break;
  }
  case 2:{
    digitalWrite(P6, HIGH);
    digitalWrite(P5, LOW);
    digitalWrite(P4, LOW);
    digitalWrite(P3, LOW);
    digitalWrite(P2, LOW);
    digitalWrite(P1, LOW);
    digitalWrite(P0, HIGH);
    break;
  }
 case 1:{
    digitalWrite(P6, LOW);
    digitalWrite(P5, LOW);
    digitalWrite(P4, LOW);
    digitalWrite(P3, HIGH);
    digitalWrite(P2, LOW);
    digitalWrite(P1, LOW);
    digitalWrite(P0, LOW);
    break;
 }
 default:
    digitalWrite(P6, LOW);
    digitalWrite(P5, LOW);
    digitalWrite(P4, LOW);
    digitalWrite(P3, LOW);
    digitalWrite(P2, LOW);
    digitalWrite(P1, LOW);
    digitalWrite(P0, LOW);
    break;
  }
}

//used to generate a random number between LowVal and HighVal
int rand(int LowVal, int HighVal)
{
    unsigned long result = (millis() % (HighVal-LowVal)) + LowVal;
    return (int)result;
}

void DiceRoll(unsigned int iDur, unsigned int MyDelay,  unsigned int slowBy){
  //Rolls the dice. Changes the the output to give the appearence of a dice roll
  //gets slower giving the appearance it is slowing down
  //stops with final output value
  unsigned int Flips;
  unsigned int i;
  unsigned int FirstFlips;
  unsigned int SecondFlips;
  unsigned int shaveOff;
  unsigned int slowInc;
  unsigned int num;

  //iDur = 10000; //milliseconds
  //MyDelay = 10;//milliseconds; Delays per flip
  //slowBy = 1000;//milliseconds; additional time for last flip. i.e. if 1000, the last flip takes an extra second per flip

  //Programmer-bounding
  if (iDur>10000){
    iDur = 10000;
  }
  if (MyDelay > iDur){
    MyDelay = iDur;
  }
  if (slowBy >= 8*MyDelay){
    slowBy = 8*MyDelay;
  }

  Flips = iDur / MyDelay;
  //We now have to allocate some time for the slowdown by shaving time away from the first 80% and adding it to the last 20%
  FirstFlips = Flips*80/100; //number of flips for the 80% before we ramp up
  SecondFlips = Flips - FirstFlips; //remaining flips
  shaveOff = (SecondFlips)*slowBy/2; //time we need to shave off the FirstFlips. Used the area of a triangle formula
  MyDelay = (FirstFlips*MyDelay - shaveOff) / (FirstFlips);
  slowInc = slowBy / SecondFlips; //how much to increment per flip for the second part


  //Execute the flip-time profile
  for (i=0; i<Flips; i++){
    num = rand(1, 6);
    DisplayDice(num);

    if (i > FirstFlips){
      MyDelay += slowInc;
      delay(MyDelay);
    }
    else{
      delay(MyDelay);
    }
  }

  delay(1000);
  ClearMemory();
}

void setup() {
  //Powerup cycle
  //initialize hardware
  pinMode(P7, INPUT);
  pinMode(P6, OUTPUT);
  pinMode(P5, OUTPUT);
  pinMode(P4, OUTPUT);
  pinMode(P3, OUTPUT);
  pinMode(P2, OUTPUT);
  pinMode(P1, OUTPUT);
  pinMode(P0, OUTPUT);

  //check I/O module configuration
  //initialize memory
  ClearMemory();
}

void loop()
{
  //Update input
  int P7 = digitalRead(7);
  //Update remote I/O
  //CPU bus comms
  //Update clock
  //Check if in run mode

  //Main function
  if (P7==HIGH){
    DiceRoll(2000,10,250);
  }
  else
  {
    ClearMemory();
  }

  //diagnostics checking
  //write errors
  //write fatal errors
  //Force out of run mode if necessary
}
